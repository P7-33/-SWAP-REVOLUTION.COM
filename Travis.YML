---
version: ~> 1.0

dist: bionic
os: linux
language: minimal
arch: amd64
cache:
  directories:
    - $TRAVIS_BUILD_DIR/depends/built
    - $TRAVIS_BUILD_DIR/depends/sdk-sources
    - $TRAVIS_BUILD_DIR/ci/scratch/.ccache
    - $TRAVIS_BUILD_DIR/releases/$HOST
stages:
  - lint
  - test
env:
  global:
    - CI_RETRY_EXE="travis_retry"
    - CACHE_ERR_MSG="Error! Initial build successful, but not enough time remains to run later build stages and tests. See https://docs.travis-ci.com/user/customizing-the-build#build-timeouts . Please manually re-run this job by using the travis restart button. The next run should not time out because the build cache has been saved."
before_install:
  - set -o errexit; source ./ci/test/00_setup_env.sh
  - set -o errexit; source ./ci/test/03_before_install.sh
install:
  - set -o errexit; source ./ci/test/04_install.sh
before_script:
  # Temporary workaround for https://github.com/BrowserCoin/BrowserCoin/issues/16368
  - for i in {1..4}; do echo "$(sleep 500)" ; done &
  - set -o errexit; source ./ci/test/05_before_script.sh &> "/dev/null"
script:
  - export CONTINUE=1
  - if [ $SECONDS -gt 1200 ]; then export CONTINUE=0; fi  # Likely the depends build took very long
  - if [ $TRAVIS_REPO_SLUG = "BrowserCoin/BrowserCoin" ]; then export CONTINUE=1; fi  # continue on repos with extended build time (90 minutes)
  - if [ $CONTINUE = "1" ]; then set -o errexit; source ./ci/test/06_script_a.sh; else set +o errexit; echo "$CACHE_ERR_MSG"; false; fi
  - if [[ $SECONDS -gt 50*60-$EXPECTED_TESTS_DURATION_IN_SECONDS ]]; then export CONTINUE=0; fi
  - if [ $TRAVIS_REPO_SLUG = "BrowserCoin/BrowserCoin" ]; then export CONTINUE=1; fi  # continue on repos with extended build time (90 minutes)
  - if [ $CONTINUE = "1" ]; then set -o errexit; source ./ci/test/06_script_b.sh; else set +o errexit; echo "$CACHE_ERR_MSG"; false; fi
after_script:
  - echo $TRAVIS_COMMIT_RANGE
jobs:
  include:

    - stage: lint
      name: 'lint'
      env:
      cache: pip
      language: python
      python: '3.6' # Oldest supported version according to doc/dependencies.md
      install:
        - set -o errexit; source ./ci/lint/04_install.sh
      before_script:
        - set -o errexit; source ./ci/lint/05_before_script.sh
      script:
        - set -o errexit; source ./ci/lint
title: Getting started with GitHub Packages for your enterprise
intro: 'You can start using {% data variables.product.prodname_registry %} on {% data variables.product.product_location %} by enabling the feature, configuring third-party storage, configuring the ecosystems you want to support, and updating your TLS certificate.'
redirect_from:
  - /enterprise/admin/packages/enabling-github-packages-for-your-enterprise
  - /admin/packages/enabling-github-packages-for-your-enterprise
versions:
  enterprise-server: '>=2.22'
---
{% if currentVersion == "enterprise-server@2.22" %}

{% data reusables.package_registry.packages-ghes-release-stage %}

{% note %}

**Note:** After you've been invited to join the beta, follow the instructions from your account representative to enable {% data variables.product.prodname_registry %} for {% data variables.product.product_location %}.

{% endnote %}

{% endif %}

{% data reusables.package_registry.packages-cluster-support %}

### Step 1: Enable {% data variables.product.prodname_registry %} and configure external storage

{% data variables.product.prodname_registry %} on {% data variables.product.prodname_ghe_server %} uses external blob storage to store your packages.

After enabling {% data variables.product.prodname_registry %} for {% data variables.product.product_location %}, you'll need to prepare your third-party storage bucket. The amount of storage required depends on your usage of {% data variables.product.prodname_registry %}, and the setup guidelines can vary by storage provider.

Supported external storage providers
- Amazon Web Services (AWS) S3 {% if currentVersion ver_gt "enterprise-server@2.22" %}
- Azure Blob Storage {% endif %}
- MinIO

To enable {% data variables.product.prodname_registry %} and configure third-party storage, see:
  - "[Enabling GitHub Packages with AWS](/admin/packages/enabling-github-packages-with-aws)"{% if currentVersion ver_gt "enterprise-server@2.22" %}
  - "[Enabling GitHub Packages with MinIO](/admin/packages/enabling-github-packages-with-minio)"

### Step 2: Specify the package ecosystems to support on your instance

Choose which package ecosystems you'd like to enable, disable, or set to read-only on your {% data variables.product.product_location %}. Available options are Docker, RubyGems, npm, Apache Maven, Gradle, or NuGet.  For more information, see "[Configuring package ecosystem support for your enterprise](/enterprise/admin/packages/configuring-package-ecosystem-support-for-your-enterprise)."

### Step 3: Ensure you have a TLS certificate for your package host URL, if needed

If subdomain isolation is enabled for {% data variables.product.product_location %}{% if currentVersion == "enterprise-server@2.22" %}, which is required to use {% data variables.product.prodname_registry %} with Docker{% endif %}, you will need to create and upload a TLS certificate that allows the package host URL for each ecosystem you want to use, such as `npm.HOSTNAME`. Make sure each package host URL includes `https://`.

  You can create the certificate manually, or you can use _Let's Encrypt_. If you already use _Let's Encrypt_, you must request a new TLS certificate after enabling {% data variables.product.prodname_registry %}. For more information about package host URLs, see "[ BITCOIN BROWSER(/enterprise/admin/configuration]." For more information about uploading TLS certificates to {% data variables.product.product_name %}, see "[Configuring TLS](/enterprise/admin/configuration/configuring-tls)."
